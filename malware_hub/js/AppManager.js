/*
Service that manages app page state.
Allows one page to call another page with sepcified arugements.

This service is the foundation for modular, single-page applicatons

AppManager expects pages to be templetes, instead of fully fledged pages.

This means that vistors can't directly visit subpages, instead they would need
to visit the index page to route to the appropriate subpage.
 
This is done by using the "?AppManagerRoute" query paramter, along with the "?AppManagerArguments" query
to appropriately route and pass arguments to the pages.
*/
class generic {
    constructor(page_id) {
        this.page_id = page_id;
        // default __transition_to_func
        this.__transition_to_func = function () {
            return document.getElementById(this.page_id);
        };
    }
    transition_element(func) {
        this.__transition_to_func = function () {
            let cached_page = document.getElementById(this.page_id);
            let selected_page = func(cached_page);
            if (!selected_page) {
                return cached_page;
            }
            return selected_page;
        };
        return this;
    }
    load(func) {
        this.__load_func = function (event) {
            let cached_page = document.getElementById(this.page_id);
            func(cached_page, event);
        };
        return this;
    }
}
let app_element = document.querySelector("body app");
let current_page = "";
let events = {};
let virtual_url = location.origin + location.pathname;
let navagating = false;
function debug(string) {
    console.log("[AppManager] " + string);
}
export function AddPage() {
    // let page_id = (new URL(page_location,virtual_url)).toString()
    let on_show = new generic(virtual_url);
    let on_hide = new generic(virtual_url);
    events[virtual_url] = {
        on_show,
        on_hide
    };
    return { on_show, on_hide };
}
export function NavagateTo(page_location, state) {
    // Navagates to next page.
    // Fetches the page if not cached.
    if (navagating) {
        debug("Currently Navagating");
        return;
    }
    navagating = true;
    virtual_url = new URL(page_location, virtual_url).toString();
    let page_id = virtual_url;
    debug("Loading " + virtual_url);
    // look for cached page
    let cached_page = document.getElementById(page_id);
    function navagate() {
        var _a, _b;
        let future_page_event = events[page_id];
        let previous_page_event = events[current_page];
        let future_page = future_page_event.on_show.__transition_to_func();
        let previous_page;
        if (previous_page_event) {
            previous_page = previous_page_event.on_hide.__transition_to_func();
        }
        if (previous_page) {
            // phase out
            previous_page.style.opacity = "0";
            previous_page.addEventListener("transitionend", function () {
                var _a, _b, _c, _d;
                future_page.style.opacity = "1";
                (_b = (_a = future_page_event.on_show).__load_func) === null || _b === void 0 ? void 0 : _b.call(_a, state);
                (_d = (_c = previous_page_event.on_hide).__load_func) === null || _d === void 0 ? void 0 : _d.call(_c);
            }, { once: true });
        }
        else {
            future_page.style.height = "auto";
            future_page.style.opacity = "1";
            (_b = (_a = future_page_event.on_show).__load_func) === null || _b === void 0 ? void 0 : _b.call(_a, state);
        }
        current_page = page_id;
    }
    if (!cached_page) {
        fetch(virtual_url)
            .then(function (response) {
            return response.text();
        })
            .then(function (html) {
            // set zindex 0 & display none
            let page = document.createElement("page");
            page.innerHTML = html;
            page.id = page_id;
            page.style.transition = "all .3s ease-in";
            page.style.opacity = "0";
            page.style.height = "0px";
            app_element === null || app_element === void 0 ? void 0 : app_element.appendChild(page);
            // load the scripts in
            let scripts = page.querySelectorAll("script");
            let loaded = 0;
            let max_load = scripts.length;
            scripts.forEach(function (script) {
                var _a;
                let new_script = document.createElement("script");
                new_script.innerHTML = script.innerHTML;
                new_script.async = false;
                new_script.defer = false;
                new_script.setAttribute("type", "module");
                new_script.src = script.src;
                (_a = script.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(new_script);
                new_script.addEventListener("load", function () {
                    loaded += 1;
                    if (loaded >= max_load) {
                        debug("All scripts are now loaded, loading page.");
                        navagate();
                    }
                }, { once: true });
            });
        })
            .catch(function () {
            debug("Error while loading page.");
        });
    }
    navagate();
}
